[
    [
        "./test/fixtures/testSource.js",
        "'use strict';\n\nfunction testFn(a, b) {\n    return a + b;\n}\n\nsignet.extend('fleem', () => true);\nsignet.subtype('glurp')('foop', () => true);\nsignet.alias('zoinks{1}', 'slurm');\n\nconst int = 'int';\n\nconst isInt = signet.isTypeOf(`${int}`);\nconst isFlarb = signet.isTypeOf('flarb');\nconst isFleem = signet.isTypeOf('glurp');\nconst isFoop = signet.isTypeOf('foop');\n\nsignet.defineDependentOperatorOn('squanch')('=', () => true);\nsignet.defineDependentOperatorOn('flarp')('=', () => true);\n\nsignet.defineDuckType('dinglebop', {\n    good: 'fleem',\n    bad: 'florp',\n    warn: () => true\n});\n\nsignet.defineExactDuckType('plumbus', {\n    woot: 'foop'\n});\n\nsignet.defineRecursiveType('julia', () => null, 'blerf');\n\nconst test = signet.verifyValueType('dinglebop')('testing');\nconst test2 = signet.verifyValueType('?int')(undefined);\n\nmodule.exports = {\n    testFn: signet.enforce(\n        'A %# B :: A: squanch, B: slurm => foo', \n        testFn)\n}"
    ]
]
